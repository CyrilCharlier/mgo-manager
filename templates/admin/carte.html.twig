{% extends "base.html.twig" %}

{% block mainContent %}
<div class="container-fluid">
    <section class="px-md-4">
        <div class="row">
            <div class="col-lg-12 mb-3">
                <div class="card card-frame">
                    <div class="card-body">
                        <div class="mb-3">
                            <input type="text" id="searchInput" class="form-control" placeholder="üîç Rechercher un nom de carte">
                        </div>
                        <table class="table table-sm table-hover mb-0 text-center">
                            <thead>
                                <tr>
                                    <th>Album</th>
                                    <th>Page</th>
                                    <th>num√©ro</th>
                                    <th>Nom</th>
                                    <th>Etoile</th>
                                    <th>Or</th>
                                </tr>
                            </thead>
                            <tbody>
                            {% for c in cartes %}
                                <tr>
                                    <td>{{ c.s.album.name }}</td>
                                    <td>{{ c.s.name }}</td>
                                    <td class="editable" data-id="{{ c.id }}" data-field="num" id="num{{c.id}}">{{ c.num }}</td>
                                    <td class="editable" data-id="{{ c.id }}" data-field="name" id="name{{c.id}}">{{ c.name }}</td>
                                    <td class="editable" data-id="{{ c.id }}" data-field="nbetoile" id="nbetoile{{c.id}}">{{ c.nbetoile }}</td>
                                    <td>
                                        <i class="material-icons {% if c.golden %}text-warning{% else %}text-muted{% endif %} editable-golden"
                                            data-id="{{ c.id }}"
                                            data-field="golden"
                                            style="cursor:pointer;">
                                            {% if c.golden %}star{% else %}star_border{% endif %}
                                        </i>
                                    </td>
                                </tr>
                            {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>
</div>
{% endblock %}

{% block javaScripts %}
<script>
    function initSearch() {
        const input = document.getElementById('searchInput');
        const tbody = document.querySelector('table tbody');
        const allRows = Array.from(tbody.querySelectorAll('tr'));

        input.addEventListener('input', function () {
            const search = this.value.trim().toLowerCase();

            if (!search) {
                // Recherche vide => on restaure l‚Äôordre initial
                tbody.innerHTML = '';
                allRows.forEach(row => {
                    row.classList.remove('highlight');
                    tbody.appendChild(row);
                });
                return;
            }

            // On s√©pare les lignes qui correspondent et celles qui ne correspondent pas
            const matching = [];
            const others = [];

            allRows.forEach(row => {
                const text = row.textContent.toLowerCase();
                if (text.includes(search)) {
                    row.classList.add('highlight');
                    matching.push(row);
                } else {
                    row.classList.remove('highlight');
                    others.push(row);
                }
            });

            // On r√©ordonne le tableau : correspondantes en haut, le reste ensuite
            tbody.innerHTML = '';
            matching.forEach(row => tbody.appendChild(row));
            others.forEach(row => tbody.appendChild(row));
        });
    }

    function initEditInline() {
        document.querySelectorAll("td.editable").forEach(function (cell) {
            cell.addEventListener("click", function () {
                if (cell.querySelector("input")) return; // d√©j√† en √©dition

                const oldValue = cell.innerText.trim();
                const input = document.createElement("input");
                if (cell.dataset.field === "num" || cell.dataset.field === "nbetoile") {
                    input.type = "number";
                    input.min = "1";
                    if (cell.dataset.field === "nbetoile") input.max = "6";
                    if (cell.dataset.field === "nu:") input.max = "9";
                } else {
                    input.type = "text";
                }
                input.value = oldValue;
                input.className = "form-control form-control-sm";

                cell.innerHTML = "";
                cell.appendChild(input);
                input.focus();

                const save = () => {
                    const newValue = input.value.trim();
                    if (newValue === oldValue) {
                        cell.innerText = oldValue;
                        return;
                    }

                    fetch(`/admin/carte/${cell.dataset.id}/inline-edit`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded",
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        body: new URLSearchParams({
                            field: cell.dataset.field,
                            value: newValue
                        })
                    })
                    .then(r => r.json())
                    .then(data => {
                        if (data.success) {
                            cell.innerText = data.value;
                        } else {
                            cell.innerText = oldValue;
                            MGOM.notify(data.error, 'error');
                        }
                    })
                    .catch(() => {
                        cell.innerText = oldValue;
                        MGOM.notify("Erreur r√©seau", 'error');
                    });
                };

                input.addEventListener("blur", save);
                input.addEventListener("keydown", function (e) {
                    if (e.key === "Enter") save();
                    if (e.key === "Escape") cell.innerText = oldValue;
                });
            });
        });

        document.querySelectorAll("i.editable-golden").forEach(function (elt) {
            elt.addEventListener("click", function () {
                const id = this.dataset.id;
                const field = this.dataset.field;
                const currentValue = this.textContent.trim() === "star";
                const newValue = currentValue ? 0 : 1;

                fetch(`/admin/carte/${elt.dataset.id}/inline-edit`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                        "X-Requested-With": "XMLHttpRequest"
                    },
                    body: new URLSearchParams({
                        field: elt.dataset.field,
                        value: newValue
                    })
                })
                .then(r => r.json())
                .then(data => {
                    if (data.success) {
                        if (newValue) {
                            this.textContent = "star";
                            this.classList.remove("text-muted");
                            this.classList.add("text-warning");
                        } else {
                            this.textContent = "star_border";
                            this.classList.remove("text-warning");
                            this.classList.add("text-muted");
                        }
                    } else {
                        cell.innerText = oldValue;
                        MGOM.notify(data.error, 'error');
                    }
                })
                .catch(() => {
                    cell.innerText = oldValue;
                    MGOM.notify("Erreur r√©seau", 'error');
                });
            });
        });
    }

    function onPageLoad() {
        initSearch();
        initEditInline();
    }
    
    window.addEventListener('load', onPageLoad);
</script>
{% endblock %}

{% block styleSheets %}
<style>
.highlight {
    background-color: rgba(0, 123, 255, 0.25) !important; /* bleu clair semi-transparent */
    transition: background-color 0.6s ease;
}
</style>
{% endblock %}