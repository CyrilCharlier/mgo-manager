{% extends "base.html.twig" %}

{% block mainContent %}
<div class="container-fluid">
    <section class="px-md-4">
        <div class="row">
            <div class="col-lg-12 position-relative mb-3 col-transition overflow-visible">
                <div class="card card-frame">
                    <div class="card-body">
                        <div class="mb-3 text-start text-white">
                            <i class="material-symbols-rounded opacity-5">info</i>
                            Vue par compte : chaque bloc montre les cartes que ce compte peut recevoir, avec les donneurs possibles (et leur stock de doublons).
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
        {% set comptes = app.user.comptes|sort((a, b) => a.isPrincipal ? -1 : 1) %}
        {% for cpte in comptes %}
            <div class="col-lg-6 position-relative mb-3 col-transition overflow-visible compte-block">
                <div class="entete-flottante text-white bg-primary text-center px-2 py-1 rounded shadow-sm">
                    {{ cpte.name }}
                </div>
                <div class="card card-frame">
                    <div class="card-body">
                        <div class="text-xs">
                            <div class="table-responsive">
                                <table class="table table-sm table-hover mb-0 text-xs">
                                    <thead>
                                        <tr>
                                            <th class="text-center">#</th>
                                            <th>Carte</th>
                                            <th>Peut donner</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    {% for s in album.sets %}
                                        {% for c in s.cartes %}
                                            {% set carteObtenue = cpte.getCarteObtenue(c) %}
                                            {% if carteObtenue is null %}
                                                {% set donneurs = [] %}
                                                {% for cpte2 in comptes %}
                                                    {% if cpte2.id != cpte.id %}
                                                        {% set obt = cpte2.getCarteObtenue(c) %}
                                                        {% if obt is not null and obt.nombre > 1 and (not c.isGolden or c.isTransferable) %}
                                                            {% set donneurs = donneurs|merge([{ 'compte': cpte2, 'nombre': obt.nombre }]) %}
                                                        {% endif %}
                                                    {% endif %}
                                                {% endfor %}

                                                {% if donneurs|length > 0 %}
                                                    <tr data-id-carte="{{ c.id }}" data-id-compte-to="{{ cpte.id }}">
                                                        <td class="text-center text-primary">p{{ s.page }} c{{ c.num }}</td>
                                                        <td class="text-primary">{{ c.getNameStyle }}</td>
                                                        <td>
                                                            {% for d in donneurs %}
                                                                <button
                                                                    type="button"
                                                                    data-id-carte="{{ c.id }}"
                                                                    data-name-carte="{{ c.name }}"
                                                                    data-name-compte-from="{{ d.compte.name }}"
                                                                    data-id-compte-from="{{ d.compte.id }}"
                                                                    data-id-compte-to="{{ cpte.id }}"
                                                                    data-name-compte-to="{{ cpte.name }}"
                                                                    data-stock="{{ d.nombre }}"
                                                                    class="btn btn-xs btn-primary transfert-btn"
                                                                >
                                                                    {{ d.compte.name }} (x{{ d.nombre - 1 }})
                                                                </button>
                                                            {% endfor %}
                                                        </td>
                                                    </tr>
                                                {% endif %}
                                            {% endif %}
                                        {% endfor %}
                                    {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
        </div>
    </section>
</div>

<div class="modal fade" id="confirmTransfertModal" tabindex="-1" aria-labelledby="confirmTransfertLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content bg-dark text-white border-secondary">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmTransfertLabel">Confirmer le transfert</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      <div class="modal-body" id="confirmTransfertBody"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" class="btn btn-primary" id="confirmTransfertBtn">Confirmer</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block javaScripts %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    const modal = new bootstrap.Modal(document.getElementById('confirmTransfertModal'));
    const modalBody = document.getElementById('confirmTransfertBody');
    const confirmBtn = document.getElementById('confirmTransfertBtn');

    let currentButton = null;

    // Vérifie si une table est vide -> supprime le bloc du compte
    function checkAndRemoveEmptyBlock(container) {
        if (!container) return;
        const tbody = container.querySelector('tbody');
        if (tbody && tbody.querySelectorAll('tr').length === 0) {
            container.classList.add('fadeout-block');
            container.addEventListener('animationend', () => container.remove(), { once: true });
        }
    }

    // Vérification initiale au chargement
    document.querySelectorAll('.compte-block').forEach(block => {
        checkAndRemoveEmptyBlock(block);
    });

    // Ouvre le modal
    document.querySelectorAll('.transfert-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
            currentButton = btn;
            const nameCarte = btn.dataset.nameCarte;
            const fromName  = btn.dataset.nameCompteFrom;
            const toName    = btn.dataset.nameCompteTo;
            modalBody.textContent = `Confirmer le transfert de la carte ${nameCarte} de ${fromName} vers ${toName} ?`;
            modal.show();
        });
    });

    // Confirme le transfert
    confirmBtn.addEventListener('click', function () {
        if (!currentButton) return;

        const idCarte = currentButton.dataset.idCarte;
        const fromId  = currentButton.dataset.idCompteFrom;
        const toId    = currentButton.dataset.idCompteTo;
        const row     = currentButton.closest('tr');
        const block   = currentButton.closest('.compte-block');

        fetch(`/compte/transfert/${fromId}/${toId}/${idCarte}`, {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(r => r.json())
        .then(data => {
            if (!data.success) {
                MGOM.notify(data.message || 'Transfert impossible.', 'error');
                return;
            }

            MGOM.notify(data.message, 'info');

            // 1) Toujours : bouton + ligne disparaissent
            currentButton.classList.add('fadeout-btn');
            currentButton.addEventListener('animationend', () => {
                if(currentButton) {
                    currentButton.remove();
                }
                if (row) {
                    row.classList.add('fadeout-row');
                    row.addEventListener('animationend', () => {
                        row.remove();
                        checkAndRemoveEmptyBlock(block);
                    }, { once: true });
                } else {
                    checkAndRemoveEmptyBlock(block);
                }
            }, { once: true });

            // 2) remaining > 1 : mise à jour des autres boutons
            if (data.remaining > 1) {
                const selector = `.transfert-btn[data-id-carte="${idCarte}"][data-id-compte-from="${fromId}"]`;
                document.querySelectorAll(selector).forEach((btn) => {
                    if (btn === currentButton) return;
                    btn.dataset.stock = data.remaining;
                    btn.textContent = `${btn.dataset.nameCompteFrom} (x${data.remaining - 1})`;
                });
            }

            // 3) remaining <= 1 : supprime tous les autres boutons de ce donneur pour cette carte
            if (data.remaining <= 1) {
                const selector = `.transfert-btn[data-id-carte="${idCarte}"][data-id-compte-from="${fromId}"]`;
                document.querySelectorAll(selector).forEach((btn) => {
                    if (btn === currentButton) return;
                    const r = btn.closest('tr');
                    const b = btn.closest('.compte-block');
                    btn.classList.add('fadeout-btn');
                    btn.addEventListener('animationend', () => {
                        btn.remove();
                        if (r && !r.querySelector('.transfert-btn')) {
                            r.classList.add('fadeout-row');
                            r.addEventListener('animationend', () => {
                                r.remove();
                                checkAndRemoveEmptyBlock(b);
                            }, { once: true });
                        } else {
                            checkAndRemoveEmptyBlock(b);
                        }
                    }, { once: true });
                });
            }
        })
        .catch(() => {
            MGOM.notify('Une erreur est survenue lors du transfert.', 'error');
        })
        .finally(() => {
            modal.hide();
            currentButton = null;
        });
    });
});
</script>
{% endblock %}

{% block styleSheets %}
<style>
table.table td,
table.table th {
  vertical-align: middle !important;
}

.entete-flottante {
  position: absolute;
  top: -0.75rem;
  left: 50%;
  transform: translateX(-50%);
  font-size: 0.75rem;
  z-index: 2;
  pointer-events: none;
}

/* Transition douce sur les blocs pour éviter les sauts */
.compte-block {
  transition: height 0.4s ease;
  overflow: hidden;
}

/* Boutons : fade rapide */
@keyframes fadeoutBtn {
  from { opacity: 1; }
  to   { opacity: 0; }
}
.fadeout-btn {
  animation: fadeoutBtn 0.25s ease forwards;
}

/* Lignes : fade + shrink un peu plus lent */
@keyframes fadeoutRow {
  from { opacity: 1; transform: scale(1); }
  to   { opacity: 0; transform: scale(0.97); }
}
.fadeout-row {
  animation: fadeoutRow 0.35s ease forwards;
}

/* Blocs : fade + shrink légèrement plus long */
@keyframes fadeoutBlock {
  from { opacity: 1; transform: scale(1); }
  to   { opacity: 0; transform: scale(0.95); }
}
.fadeout-block {
  animation: fadeoutBlock 0.5s ease forwards;
}
</style>
{% endblock %}

