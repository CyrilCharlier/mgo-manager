{% extends "base.html.twig" %}

{% block mainContent %}
<div class="container-fluid">
    <section class="px-md-4">
        <div class="row">
            <div class="col-lg-12 position-relative mb-3 col-transition overflow-visible">
                <div class="card card-frame">
                    <div class="card-body">
                        <div class="mb-3 text-start text-white">
                            <i class="material-symbols-rounded opacity-5">info</i>
                            Vue par compte : chaque bloc montre les cartes que ce compte peut recevoir, avec les donneurs possibles (et leur stock de doublons).
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
        {% set comptes = app.user.comptes|sort((a, b) => a.isPrincipal ? -1 : 1) %}
        {% for cpte in comptes %}
            <div class="col-lg-6 position-relative mb-3 col-transition overflow-visible">
                <div class="entete-flottante text-white bg-primary text-center px-2 py-1 rounded shadow-sm">
                    {{ cpte.name }}
                </div>
                <div class="card card-frame">
                    <div class="card-body">
                        <div class="text-xs">
                            <div class="table-responsive">
                                <table class="table table-sm table-hover mb-0 text-xs">
                                    <thead>
                                        <tr>
                                            <th class="text-center">#</th>
                                            <th>Carte</th>
                                            <th>Peut donner</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    {% for s in album.sets %}
                                        {% for c in s.cartes %}
                                            {% set carteObtenue = cpte.getCarteObtenue(c) %}
                                            {% if carteObtenue is null %}
                                                {% set donneurs = [] %}
                                                {% for cpte2 in comptes %}
                                                    {% if cpte2.id != cpte.id %}
                                                        {% set obt = cpte2.getCarteObtenue(c) %}
                                                        {% if obt is not null and obt.nombre > 1 and (not c.isGolden or c.isTransferable) %}
                                                            {% set donneurs = donneurs|merge([{ 'compte': cpte2, 'nombre': obt.nombre }]) %}
                                                        {% endif %}
                                                    {% endif %}
                                                {% endfor %}

                                                {% if donneurs|length > 0 %}
                                                    <tr data-id-carte="{{ c.id }}" data-id-compte-to="{{ cpte.id }}">
                                                        <td class="text-center text-primary">{{ c.num }}</td>
                                                        <td class="text-primary">{{ c.getNameStyle }}</td>
                                                        <td>
                                                            {% for d in donneurs %}
                                                                <button
                                                                    type="button"
                                                                    data-id-carte="{{ c.id }}"
                                                                    data-name-carte="{{ c.name }}"
                                                                    data-name-compte-from="{{ d.compte.name }}"
                                                                    data-id-compte-from="{{ d.compte.id }}"
                                                                    data-id-compte-to="{{ cpte.id }}"
                                                                    data-name-compte-to="{{ cpte.name }}"
                                                                    data-stock="{{ d.nombre }}"
                                                                    class="btn btn-xs btn-primary transfert-btn"
                                                                >
                                                                    {{ d.compte.name }} (x{{ d.nombre - 1 }})
                                                                </button>
                                                            {% endfor %}
                                                        </td>
                                                    </tr>
                                                {% endif %}
                                            {% endif %}
                                        {% endfor %}
                                    {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        {% endfor %}
        </div>
    </section>
</div>

<div class="modal fade" id="confirmTransfertModal" tabindex="-1" aria-labelledby="confirmTransfertLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content bg-dark text-white border-secondary">
      <div class="modal-header">
        <h5 class="modal-title" id="confirmTransfertLabel">Confirmer le transfert</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
      </div>
      <div class="modal-body" id="confirmTransfertBody">
        <!-- Message ici -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
        <button type="button" class="btn btn-primary" id="confirmTransfertBtn">Confirmer</button>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block javaScripts %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    const modal = new bootstrap.Modal(document.getElementById('confirmTransfertModal'));
    const modalBody = document.getElementById('confirmTransfertBody');
    const confirmBtn = document.getElementById('confirmTransfertBtn');

    let currentButton = null;

    document.querySelectorAll('.transfert-btn').forEach(function (btn) {
        btn.addEventListener('click', function () {
            currentButton = btn;

            const nameCarte = btn.dataset.nameCarte;
            const fromName = btn.dataset.nameCompteFrom;
            const toName = btn.dataset.nameCompteTo;

            modalBody.textContent = `Confirmer le transfert de la carte ${nameCarte} de ${fromName} vers ${toName} ?`;
            modal.show();
        });
    });

    confirmBtn.addEventListener('click', function () {
        if (!currentButton) return;

        const idCarte = currentButton.dataset.idCarte;
        const fromId = currentButton.dataset.idCompteFrom;
        const toId = currentButton.dataset.idCompteTo;

        fetch(`/compte/transfert/${fromId}/${toId}/${idCarte}`, {
            method: 'POST',
            headers: { 'X-Requested-With': 'XMLHttpRequest' }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                MGOM.notify(data.message, 'info');

                if (data.remaining <= 1) {
                    // Supprimer tous les boutons du même donneur pour cette carte
                    const selector = `.transfert-btn[data-id-carte="${idCarte}"][data-id-compte-from="${fromId}"]`;
                    document.querySelectorAll(selector).forEach(btn => {
                        btn.classList.add('explode');
                        btn.addEventListener('animationend', () => btn.remove(), { once: true });
                    });

                    // Vérifier si plus aucun bouton disponible dans la ligne
                    const row = currentButton.closest('tr');
                    setTimeout(() => {
                        if (row && row.querySelectorAll('.transfert-btn').length === 0) {
                            row.classList.add('fadeout-row');
                            row.addEventListener('animationend', () => row.remove(), { once: true });
                        }
                    }, 600);

                } else {
                    // Mettre à jour le stock du bouton cliqué
                    let newStock = parseInt(currentButton.dataset.stock) - 1;
                    currentButton.dataset.stock = newStock;
                    currentButton.textContent = `${currentButton.dataset.nameCompteFrom} (x${newStock-1})`;

                    // Explosion uniquement du bouton cliqué si on veut feedback visuel
                    currentButton.classList.add('explode');
                    currentButton.addEventListener('animationend', () => {
                        currentButton.classList.remove('explode');
                    }, { once: true });
                }

            } else {
                MGOM.notify(data.message, 'error');
            }
        })
        .catch(() => {
            MGOM.notify('Une erreur est survenue lors du transfert.', 'error');
        })
        .finally(() => {
            modal.hide();
            currentButton = null;
        });
    });
});
</script>
{% endblock %}

{% block styleSheets %}
<style>
table.table td,
table.table th {
  vertical-align: middle !important;
}

.dark-version .table > :not(caption) > * > *.text-success {
    color: #4CAF50 !important; /* vert */
}

.dark-version .table > :not(caption) > * > *.text-danger {
    color: #F44335 !important; /* rouge */
}

.entete-flottante {
  position: absolute;
  top: -0.75rem;
  left: 50%;
  transform: translateX(-50%);
  font-size: 0.75rem;
  z-index: 2;
  pointer-events: none;
}

/* Effet explosion bouton */
@keyframes explode {
    0% { transform: scale(1); opacity: 1; }
    50% { transform: scale(1.5) rotate(15deg); opacity: 0.6; }
    100% { transform: scale(0) rotate(90deg); opacity: 0; }
}
.explode { animation: explode 0.5s ease-out forwards; }

/* Effet disparition ligne */
@keyframes fadeoutRow {
    0% { opacity: 1; transform: translateX(0); }
    100% { opacity: 0; transform: translateX(100%); }
}
.fadeout-row {
    animation: fadeoutRow 0.7s ease forwards;
}
</style>
{% endblock %}
