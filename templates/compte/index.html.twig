{% extends "base.html.twig" %}
{% import 'macros/comptes.html.twig' as comptes %}

{% block mainContent %}
    <div class="container-fluid">
      <section class="px-md-4">
{% if app.user.mail is empty %}
<div class="position-fixed top-0 end-0 p-3" style="z-index: 1080;">
  <div class="toast show align-items-center text-white bg-primary border-0 shadow-lg" style="background-color: #e91e63 !important;" role="alert" aria-live="assertive" aria-atomic="true">
    <div class="d-flex">
      <div class="toast-body">
        <i class="material-symbols-rounded me-2">priority_high</i>
        <a href="javascript:;" 
           data-url="{{ path('app_profile') }}" 
           data-title="Modifier le profil" 
           data-bs-toggle="modal" 
           data-bs-target="#userModal"
           class="text-white text-decoration-underline text-hover-primary transition">
          Votre profil
        </a> ne poss√®de pas de mail. Ajoutez-en un pour pouvoir r√©cup√©rer votre mot de passe.
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  </div>
</div>
{% endif %}
        <div class="scroll-container d-flex flex-nowrap pb-3 gap-3">
          {% if album is not null %}
              {% for c in userComptes %}
                <div style="min-width: 300px; max-width: 350px;">
                  {{ comptes.renderCompte(c, etoilesDoublesParCompte[c.id], nombreCartesObtenuesParCompte[c.id], album.getTotalCarte) }}
                </div>
              {% endfor %}
          {% else %}
              <div class="alert alert-warning">Aucun album actif.</div>
          {% endif %}
          {% if userComptes|length == 0 %}
            <div class="card bg-gradient-dark border border-primary border-2 shadow-lg" id="create-account-hint">
              <div class="card-header pb-0 d-flex align-items-center">
                <i class="material-symbols-rounded text-primary me-2" style="font-size: 2rem;">rocket_launch</i>
                <h5 class="mb-0 text-white">En route vers les √©toiles...</h5>
              </div>
              <div class="card-body text-white">
                <p class="mb-4">
                  Pour explorer les cartes et √©changer avec vos comptes, vous devez d‚Äôabord <strong>cr√©er un compte Monopoly GO Manager.</strong>
                </p>
                <a href="#" class="btn btn-primary btn-block btn-lg"
                    data-url="{{ path('app_compte_add') }}"
                    data-title="Ajouter un compte"
                    data-bs-toggle="modal"
                    data-bs-target="#accountModal">
                  üöÄ Cr√©er un compte maintenant
                </a>
              </div>
            </div>
          {% endif %}
        </div>
        {% if userComptes|length != 0 %}
        <div class="row">
          <div class="col-lg-4 col-md-6 mt-4">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Qui poss√®de ...</h5>
                <button id="togglePrincipalBtn" class="btn btn-sm btn-info" type="button" title="Afficher uniquement les comptes principaux">
                  <i class="fas fa-eye"></i>
                </button>
              </div>
              <div class="card-body pt-0">
                <div class="input-group input-group-outline">
                  <select id="carte_double" class="form-control select2" style="width: 100%">
                    <option value="0">S√©lectionner une carte</option>
                    {% for s in albumActif.sets %}
                    <optgroup label="{{ s.page }} - {{ s.name }}">
                      {% for c in s.cartes %}
                      <option value="{{ c.id }}">{{ c.nameStyle }}</option>
                      {% endfor %}
                    </optgroup>
                    {% endfor %}
                  </select>
                </div>
                <p class="text-muted mt-4">
                  {% for c in userComptes %}
                  <span id="badge_compte{{c.id}}" class="badge badge-info ms-auto mb-auto compte-carte-double" data-id="{{ c.id }}" data-principal="{{ (c.principal ? '1' : '0') }}" data-name="{{ c.name }}">{{ c.name }}</span>
                  {% endfor %}
                </p>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card z-index-2 mt-4">
              <div class="card-header p-3 pt-2">
                <div class="icon icon-lg icon-shape bg-gradient-dark shadow-dark text-center border-radius-xl mt-n4 me-3 float-start">
                  <i class="material-symbols-rounded opacity-10">multiline_chart</i>
                </div>
                <h6 class="mb-0">Progression</h6>
              </div>
              <div class="card-body p-1 pt-0">
                <div class="chart">
                  <canvas id="radar-chart" class="chart-canvas" height="100"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
        {% endif %}
      </section>
    </div>
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white border-secondary">
          <div class="modal-header border-0">
            <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmation de suppression</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fermer"></button>
          </div>
          <div class="modal-body">
            √ätes-vous s√ªr de vouloir supprimer ce compte ? Cette action est <strong>d√©finitive</strong>.
          </div>
          <div class="modal-footer border-0">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
            <a id="confirmDeleteBtn" href="#" class="btn btn-danger">Supprimer</a>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block javaScripts %}
  <script src="{{ asset('assets/js/plugins/countup.min.js') }}"></script>
  <script src="{{ asset('assets/js/plugins/chartjs.min.js') }}"></script>
  <script>
    var showingOnlyPrincipal = false;
    const radarColors = [
      { bg: "rgba(255, 99, 132, 0.2)", border: "rgba(255, 99, 132, 1)" },   // rouge
      { bg: "rgba(54, 162, 235, 0.2)", border: "rgba(54, 162, 235, 1)" },   // bleu
      { bg: "rgba(255, 206, 86, 0.2)", border: "rgba(255, 206, 86, 1)" },   // jaune
      { bg: "rgba(75, 192, 192, 0.2)", border: "rgba(75, 192, 192, 1)" },   // turquoise
      { bg: "rgba(153, 102, 255, 0.2)", border: "rgba(153, 102, 255, 1)" }, // violet
    ];

    function initChart() {
      var ctxR = document.getElementById("radar-chart").getContext("2d");
      var labels = {{ album.sets|map(set => (set.page~' - '~set.name))|json_encode|raw }};
      console.log(labels)

      new Chart(ctxR, {
        type: "radar",
        data: {
          labels: [
              {% for set in album.sets %}
                  "{{ set.page ~ ' - ' ~ set.name }}"{% if not loop.last %},{% endif %}
              {% endfor %}
          ],
          datasets: [
            {% for compte in userComptes %}
            (function() {
              const color = radarColors[{{ loop.index0 }} % radarColors.length];
              return {
                label: "{{ compte.name|e('js') }}",
                backgroundColor: color.bg,
                borderColor: color.border,
                pointBackgroundColor: color.border,
                data: [
                  {% for s in album.sets %}
                    {{ s.cartes|filter(c => compte.getCarteObtenue(c))|length }}{% if not loop.last %}, {% endif %}
                  {% endfor %}
                ]
              };
            })(){% if not loop.last %}, {% endif %}
            {% endfor %}
          ]
        },
        options: {
          plugins: {
            legend: {
              display: true,
              labels: {
                color: "#fff" // couleur du texte de l√©gende en mode dark
              }
            }
          },
          scales: {
            r: {
              pointLabels: {
                color: "#fff" // labels autour du radar
              },
              grid: {
                color: "rgba(255, 255, 255, 0.1)"
              },
              angleLines: {
                color: "rgba(255, 255, 255, 0.2)"
              },
              min: 0,
              max: 9,
              ticks: {
                display: false,
                stepSize: 1
              }
            }
          }
        }
      });
    }

    function callCopieMGO(event) {
        event.preventDefault();
        const mgo = event.currentTarget.getAttribute('data-mgo');

        if (!mgo) {
            MGOM.notify('Erreur lors de la copie', 'error');
            return;
        }

        navigator.clipboard.writeText(mgo).then(() => {
            MGOM.notify(mgo+' copi√© avec succ√®s');
        }).catch(err => {
            console.error('Erreur lors de la copie :', err);
            MGOM.notify(err, 'error');
        });
    }

    function initConfirmDelete() {
        const modal = document.getElementById('confirmDeleteModal');
        const confirmBtn = document.getElementById('confirmDeleteBtn');

        modal.addEventListener('show.bs.modal', event => {
          const triggerBtn = event.relatedTarget;
          const url = triggerBtn.getAttribute('data-url');

          confirmBtn.setAttribute('href', url);
        });
    }

    function toggleBadgePrincipal(event) {
        toggleBtn = event.currentTarget;
        showingOnlyPrincipal = !showingOnlyPrincipal;

        var badges = document.querySelectorAll('.compte-carte-double');

        badges.forEach(function(badge) {
          var isPrincipal = badge.getAttribute('data-principal') === '1';

          if (showingOnlyPrincipal) {
            // On cache ceux qui ne sont pas principaux
            if (!isPrincipal) {
              badge.style.display = 'none';
            }
          } else {
            // On affiche tous
            badge.style.display = '';
          }
        });

        // Change l'ic√¥ne du bouton selon l'√©tat
        var icon = toggleBtn.querySelector('i');
        if (showingOnlyPrincipal) {
          icon.classList.remove('fa-eye');
          icon.classList.add('fa-eye-slash');
          toggleBtn.setAttribute('title', 'Afficher tous les comptes');
        } else {
          icon.classList.remove('fa-eye-slash');
          icon.classList.add('fa-eye');
          toggleBtn.setAttribute('title', 'Afficher uniquement les comptes principaux');
        }
    }

    function enregistrePublicationDuJour(event) {
      btn = event.currentTarget;

      const id = btn.dataset.id;

        fetch(`/publication/jour/${id}`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(r => r.json())
        .then(data => {
            if (data.success) {
                this.querySelector('i').classList.remove('text-danger');
                this.querySelector('i').classList.add('text-success');
            }
            MGOM.notify(data.message);
        });
    }

    function initEvent() {
      document.querySelectorAll('[id^="copierMGO"]').forEach(button => {
          button.addEventListener('click', callCopieMGO);
      });
      document.getElementById('togglePrincipalBtn').addEventListener('click', toggleBadgePrincipal);

      document.querySelectorAll('button[id^="genComptePagePublique"]').forEach(button => {
          button.addEventListener('click', function (e) {
            const button = e.target.closest('button[data-url]');
            document.location = button.dataset.url;
          });
      });

      document.querySelectorAll('.btn-publication').forEach(btn => {
        btn.addEventListener('click', enregistrePublicationDuJour);
      });

      $('#carte_double').on('change', callComptePossede);
    }

    function callComptePossede(event) {
      event.preventDefault();
      var carteid = $(this).val();
      document.querySelectorAll('.compte-carte-double').forEach(span => {
          span.classList.remove('badge-success');
          span.classList.remove('badge-info');
          span.classList.add('badge-danger');
          span.innerText = span.dataset.name; // R√©initialise le nom d‚Äôorigine
      });

      MGOM.fetchData("/recherche/carteobtenue/" + carteid)
          .then(data => {
              console.log('Succ√®s:', data);
              if (data.success) {
                  data.message.comptes.forEach(function(compte) {
                      document.querySelectorAll('.compte-carte-double[data-id="' + compte.id + '"]').forEach(spanCompte => {
                          if (compte.nombre > 1) {
                              spanCompte.innerText = compte.name + " (+" + (compte.nombre - 1) + ")";
                              spanCompte.classList.add('badge-success');
                              spanCompte.classList.remove('badge-danger');
                          } else if (compte.nombre == 1) {
                              spanCompte.innerText = compte.name;
                              spanCompte.classList.add('badge-success');
                              spanCompte.classList.remove('badge-danger');
                          } else {
                              spanCompte.innerText = compte.name;
                              spanCompte.classList.remove('badge-success');
                              spanCompte.classList.add('badge-danger');
                          }
                      });
                  });
              } else {
                  MGOM.notify(data.message, 'error');
              }
          })
          .catch(error => {
              console.error('Erreur:', error);
              MGOM.notify(error, 'error');
          });
    }

    function togglePrincipal(element) {
        var compteId = element.getAttribute('data-id');
        if (!compteId) return;

        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/compte/toggle-principal/' + compteId, true);

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.setRequestHeader('Content-Type', 'application/json');

        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        var data = JSON.parse(xhr.responseText);
                        if (data.success) {
                            updateIcon(element, data.principal);
                        } else {
                            MGOM.notify((data.error || 'Impossible de changer l‚Äô√©tat principal.'), 'error');
                        }
                    } catch(e) {
                        MGOM.notify("R√©ponse invalide du serveur.", 'error');
                    }
                } else {
                    alert('Erreur de communication avec le serveur (statut ' + xhr.status + ').');
                }
            }
        };

        xhr.send(null);
    }

    function updateIcon(element, isPrincipal) {
        element.classList.toggle('text-warning', isPrincipal);
        element.classList.toggle('text-secondary', !isPrincipal);

        element.classList.toggle('opacity-100', isPrincipal);
        element.classList.toggle('opacity-30', !isPrincipal);

        element.setAttribute('title', isPrincipal ? 'Compte principal' : 'D√©finir comme principal');
        element.setAttribute('aria-pressed', isPrincipal ? 'true' : 'false');
        element.style.cursor = 'pointer';

        // Ajout de l‚Äôanimation flashy
        element.classList.add('flashy');
        // Retire la classe apr√®s la fin de l‚Äôanimation (0.8s * 2 it√©rations = 1.6s)
        setTimeout(function() {
            element.classList.remove('flashy');
        }, 1600);

        // Mise √† jour du badge correspondant
        var compteId = element.getAttribute('data-id');
        if (!compteId) return;

        var badge = document.getElementById('badge_compte' + compteId);
        if (!badge) return;

        // Met √† jour l'attribut data-principal
        badge.setAttribute('data-principal', (isPrincipal ? "1" : "0"));
    }
    
    function onPageLoad() {
      initEvent();
      initConfirmDelete();
      initChart();
    }
    
    window.addEventListener('load', onPageLoad);
  </script>
{% endblock %}

{% block styleSheets %}
<style>
.opacity-30 { opacity: 0.3; }
.opacity-100 { opacity: 1; }
@keyframes flash {
  0%, 100% { filter: drop-shadow(0 0 0 transparent); }
  50% { filter: drop-shadow(0 0 8px gold); }
}

.flashy {
  animation: flash 0.8s ease-in-out 2;
}
.object-fit-contain {
  object-fit: contain;
}
.scroll-container::-webkit-scrollbar {
  height: 6px;
}

.scroll-container::-webkit-scrollbar-track {
  background: transparent;
}

.scroll-container::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
}
.code-mgo {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}
.code-mgo i {
  flex-shrink: 0;
}
/* Transition douce pour les liens Bootstrap */
.transition {
  transition: color 0.3s ease;
}

/* Classe personnalis√©e pour appliquer la couleur primaire au hover */
.text-hover-primary:hover {
  color: #0d6efd !important;
}
/* Forcer le scroll horizontal uniquement */
.scroll-container {
  overflow-x: auto;
  overflow-y: hidden;            /* <- cl√© pour enlever la barre verticale */
  scrollbar-gutter: stable both-edges; /* optionnel, √©vite les d√©calages */
}

/* Tu gardes ta personnalisation du scroll horizontal */
.scroll-container::-webkit-scrollbar { height: 6px; }

/* Et on masque explicitement la verticale au cas o√π */
.scroll-container::-webkit-scrollbar:vertical { width: 0; }
</style>
{% endblock %}