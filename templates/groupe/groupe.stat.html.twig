{% extends "base.html.twig" %}

{% block mainContent %}
<div class="container-fluid">
    <section class="px-md-4">
                <div class="row">

<div class="table-responsive table-wrapper p-0">
  <table class="table text-center align-middle table-bordered table-striped table-hover table-blur mb-0 rounded-3 shadow-lg">
    <thead class="table-dark">
      <tr>
        <th>Compte</th>
        {% for day in last30Days %}
          <th>{{ day|date("d/m") }}</th>
        {% endfor %}
        <th>Actif ?</th>
      </tr>
    </thead>
    <tbody>
      {% for compte in userComptes %}
        <tr>
          {% set pubCount7 = 0 %}
          {% for pub in compte.publications %}
            {% if pub.date|date("Y-m-d") in last7Days|map(day => day|date("Y-m-d")) %}
              {% set pubCount7 = pubCount7 + 1 %}
            {% endif %}
          {% endfor %}
          <td class="fw-bold">
            <a href="{{ path('app_groupe_user', {'id': compte.id}) }}" 
              data-bs-toggle="tooltip" title="{{ compte.joueur }}">{{ compte.name }}</a> ({{pubCount7}})
          </td>

          {# Publications par jour #}
          {% for day in last30Days %}
            {% set hasPublication = false %}
            {% for pub in compte.publications %}
              {% if pub.date|date("Y-m-d") == day|date("Y-m-d") %}
                {% set hasPublication = true %}
              {% endif %}
            {% endfor %}
<td class="text-center {% if hasPublication %}bg-success-subtle{% else %}bg-danger-subtle{% endif %}">
    {% if hasPublication %}
        <button class="btn-icon btn-success publier-btn" data-id="{{ compte.id }}" data-date="{{ day|date('Y-m-d') }}">
            <i class="fa-solid fa-check text-success"></i>
        </button>
    {% else %}
        <button class="btn-icon btn-danger publier-btn" data-id="{{ compte.id }}" data-date="{{ day|date('Y-m-d') }}">
            <i class="fa-solid fa-xmark text-danger"></i>
        </button>
    {% endif %}
</td>
          {% endfor %}

          {# Test activité = 4 publications minimum sur les 7 derniers jours #}
          {% set pubCount = 0 %}
          {% for pub in compte.publications %}
            {% if pub.date|date("Y-m-d") in last30Days|map(day => day|date("Y-m-d")) %}
              {% set pubCount = pubCount + 1 %}
            {% endif %}
          {% endfor %}
          {% set percentPub = (pubCount / 30 * 100) | round %}
          <td>
            {% if pubCount7 >= 4 %}
              <span class="badge bg-success">ACTIF</span>
            {% else %}
              <span class="badge bg-danger">INACTIF</span>
            {% endif %}
          </td>
        </tr>
      {% endfor %}
    </tbody>
  </table>
</div>


        </div>

{% if userComptes|length != 0 %}
<div class="row">
    <div class="col-lg-4 col-md-6 mt-4">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="mb-0">Qui possède ...</h5>
          <button id="toggleActifInactifBtn" class="btn btn-sm btn-info" type="button" data-bs-toggle="tooltip" title="Afficher uniquement les comptes actifs">
            <i class="fas fa-eye"></i>
          </button>
        </div>
        <div class="card-body pt-0">
        <div class="input-group input-group-outline">
            <select id="carte_double" class="form-control select2" style="width: 100%">
            <option value="0">Sélectionner une carte</option>
            {% for s in albumActif.sets %}
            <optgroup label="{{ s.page }} - {{ s.name }}">
                {% for c in s.cartes %}
                <option value="{{ c.id }}">{{ c.nameStyle }}</option>
                {% endfor %}
            </optgroup>
            {% endfor %}
            </select>
        </div>
        <p class="text-muted mt-4">
            {% for c in userComptes %}
                {% set pubCount = 0 %}
                {% for pub in c.publications %}
                    {% if pub.date|date("Y-m-d") in last7Days|map(day => day|date("Y-m-d")) %}
                        {% set pubCount = pubCount + 1 %}
                    {% endif %}
                {% endfor %}

                <span id="badge_compte{{c.id}}"
                      class="badge badge-info ms-auto mb-auto compte-carte-double"
                      data-id="{{ c.id }}"
                      data-actif="{{ pubCount >= 4 ? '1' : '0' }}"
                      data-name="{{ c.name }}">
                    {{ c.name }}
                </span>
            {% endfor %}
        </p>
        </div>
    </div>
    </div>
</div>
{% endif %}

    </section>
</div>
{% endblock %}

{% block styleSheets %}
<style>
.table-wrapper {
  background: rgba(15, 15, 15, 0.55); 
  border-radius: 15px;
  border: 1px solid rgba(255, 255, 255, 0.08);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.5);
  padding: 1rem;
}
.table-blur th:first-child,
.table-blur td:first-child {
  background-color: rgba(20, 20, 20, 0.9);
  backdrop-filter: none;
  color: #fff;
  position: sticky;
  left: 0;
  z-index: 2;
}
.table th:last-child,
.table td:last-child {
  position: sticky;
  right: 0;
  z-index: 2;
  background-color: rgba(20, 20, 20, 0.9);
}
.table-blur {
  background: transparent;
}
.table-blur tbody tr:hover {
  background-color: rgba(255, 255, 255, 0.07) !important;
  transition: background-color 0.25s ease;
}

/* ---- Heatmap Cells ---- */
/* ---- Heatmap Cells ---- */
.table td.bg-success-subtle,
.table td.bg-danger-subtle {
  transition: all 0.4s ease-in-out; /* <- Transition fluide sur la couleur, le fond, l’ombre */
}

/* Version verte */
.table td.bg-success-subtle {
  background: linear-gradient(145deg, rgba(25, 135, 84, 0.25), rgba(25, 135, 84, 0.35));
  box-shadow: inset 0 0 6px rgba(25, 135, 84, 0.6);
}

/* Version rouge */
.table td.bg-danger-subtle {
  background: linear-gradient(145deg, rgba(220, 53, 69, 0.25), rgba(220, 53, 69, 0.35));
  box-shadow: inset 0 0 6px rgba(220, 53, 69, 0.6);
}
/* simple bordure grise au survol */
.table td:hover {
  outline: 2px solid rgba(180, 180, 180, 0.8);
  outline-offset: -2px; /* pour que ça colle bien à la cellule */
}

/* Scrollbar discrète */
.table-wrapper::-webkit-scrollbar {
  height: 8px;
  width: 8px;
}
.table-wrapper::-webkit-scrollbar-track {
  background: transparent;
}
.table-wrapper::-webkit-scrollbar-thumb {
  background: rgba(255, 255, 255, 0.25);
  border-radius: 4px;
}
.table-wrapper::-webkit-scrollbar-thumb:hover {
  background: rgba(255, 255, 255, 0.4);
}
.table-wrapper {
  scrollbar-color: rgba(255, 255, 255, 0.25) transparent;
  scrollbar-width: thin;
}

/* Boutons icône */
.btn-icon {
    border: none;
    background: transparent;
    padding: 0.25rem 0.6rem;
    font-size: 1.2rem;
    border-radius: 0.25rem;
    transition: background 0.3s ease, transform 0.2s ease, color 0.3s ease;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    line-height: 1;
    min-width: 2rem;
}
.btn-icon:hover:not(:disabled) {
    transform: scale(1.05);
}
.btn-icon.btn-success {
    color: #198754;
}
.btn-icon.btn-success:hover:not(:disabled) {
    background-color: rgba(25,135,84,0.2);
    color: #fff;
}
.btn-icon.btn-danger {
    color: #dc3545;
}
.btn-icon.btn-danger:hover:not(:disabled) {
    background-color: rgba(220,53,69,0.2);
    color: #fff;
}
.btn-icon i {
    pointer-events: none;
}
</style>
{% endblock %}

{% block javaScripts %}
  <script>
    var showingOnlyPrincipal = false;
    function initEvent() {
        $('#carte_double').on('change', callComptePossede);

        document.querySelectorAll(".publier-btn").forEach(btn => {
            btn.addEventListener("click", async () => {
                const idCompte = btn.dataset.id;
                const date = btn.dataset.date;

                try {
                    const response = await fetch(`/publication/jour/${idCompte}/${date}`, {
                        method: "POST", // ou GET selon ton contrôleur
                        headers: {
                            "X-Requested-With": "XMLHttpRequest",
                        }
                    });

                    if (response.ok) {
                      const isDanger = btn.classList.contains('btn-danger');

                      // Définir les classes et icônes selon l'état
                      const from = isDanger ? 'btn-danger' : 'btn-success';
                      const to   = isDanger ? 'btn-success' : 'btn-danger';
                      const icon = isDanger 
                          ? '<i class="fa-solid fa-check text-success"></i>' 
                          : '<i class="fa-solid fa-xmark text-danger"></i>';

                      btn.classList.replace(from, to);
                      btn.innerHTML = icon;

                      const td = btn.closest('td');
                      if (td) {
                          td.classList.replace(
                              from === 'btn-danger' ? 'bg-danger-subtle' : 'bg-success-subtle',
                              to === 'btn-success' ? 'bg-success-subtle' : 'bg-danger-subtle'
                          );
                      }
                    } else {
                        MGOM.notify(data.message, 'error');
                    }
                } catch (err) {
                    console.error('Erreur:', error);
                    MGOM.notify(error, 'error');
                }
            });
        });
    }

    function initToogleActifInactif() {
      let toggleActifInactifBtn = document.getElementById("toggleActifInactifBtn");
      let showingOnlyActifs = false;

      toggleActifInactifBtn.addEventListener("click", () => {
          showingOnlyActifs = !showingOnlyActifs;

          document.querySelectorAll(".compte-carte-double").forEach(span => {
              const isActif = span.dataset.actif === "1";

              if (showingOnlyActifs) {
                  // masquer les inactifs
                  if (!isActif) {
                      span.style.display = "none";
                  }
              } else {
                  // réafficher tout
                  span.style.display = "inline-block";
              }
          });
          const icon = toggleActifInactifBtn.querySelector("i");
          if (showingOnlyActifs) {
              icon.classList.remove("fa-eye");
              icon.classList.add("fa-eye-slash");
          } else {
              icon.classList.remove("fa-eye-slash");
              icon.classList.add("fa-eye");
          }
      });
    }

    function callComptePossede(event) {
      event.preventDefault();
      var carteid = $(this).val();
      document.querySelectorAll('.compte-carte-double').forEach(span => {
          span.classList.remove('badge-success');
          span.classList.remove('badge-info');
          span.classList.add('badge-danger');
          span.innerText = span.dataset.name; // Réinitialise le nom d’origine
      });

      MGOM.fetchData("/groupe/recherche/carteobtenue/" + carteid)
          .then(data => {
              console.log('Succès:', data);
              if (data.success) {
                  data.message.comptes.forEach(function(compte) {
                      document.querySelectorAll('.compte-carte-double[data-id="' + compte.id + '"]').forEach(spanCompte => {
                          if (compte.nombre > 1) {
                              spanCompte.innerText = compte.name + " (+" + (compte.nombre - 1) + ")";
                              spanCompte.classList.add('badge-success');
                              spanCompte.classList.remove('badge-danger');
                          } else if (compte.nombre == 1) {
                              spanCompte.innerText = compte.name;
                              spanCompte.classList.add('badge-success');
                              spanCompte.classList.remove('badge-danger');
                          } else {
                              spanCompte.innerText = compte.name;
                              spanCompte.classList.remove('badge-success');
                              spanCompte.classList.add('badge-danger');
                          }
                      });
                  });
              } else {
                  MGOM.notify(data.message, 'error');
              }
          })
          .catch(error => {
              console.error('Erreur:', error);
              MGOM.notify(error, 'error');
          });
    }

    function onPageLoad() {
      initEvent();
      initToogleActifInactif();
    }
    
    window.addEventListener('load', onPageLoad);
  </script>
{% endblock %}