{% extends "base.html.twig" %}
{% import 'macros/comptes.html.twig' as comptes %}

{% block mainContent %}
    <div class="container-fluid">
      <section class="px-md-4">
        <div class="row g-3">
            {% if album is not null %}
                {% for c in userComptes %}
                    <div class="col-12 col-md-4 col-xl-3">
                        {{ comptes.renderCompte(
                            c,
                            etoilesDoublesParCompte[c.id],
                            nombreCartesObtenuesParCompte[c.id],
                            album.getTotalCarte,
                            true
                        ) }}
                    </div>
                {% endfor %}
            {% else %}
                <div class="col-12">
                    <div class="alert alert-warning">Aucun album actif.</div>
                </div>
            {% endif %}
        </div>
      </section>
    </div>
    <div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-labelledby="confirmDeleteModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content bg-dark text-white border-secondary">
          <div class="modal-header border-0">
            <h5 class="modal-title" id="confirmDeleteModalLabel">Confirmation de suppression</h5>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Fermer"></button>
          </div>
          <div class="modal-body">
            Êtes-vous sûr de vouloir supprimer ce compte ? Cette action est <strong>définitive</strong>.
          </div>
          <div class="modal-footer border-0">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
            <a id="confirmDeleteBtn" href="#" class="btn btn-danger">Supprimer</a>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block javaScripts %}
  <script src="{{ asset('assets/js/plugins/countup.min.js') }}"></script>
  <script src="{{ asset('assets/js/plugins/chartjs.min.js') }}"></script>
  <script>
    var showingOnlyPrincipal = false;

    function callCopieMGO(event) {
        event.preventDefault();
        const mgo = event.currentTarget.getAttribute('data-mgo');

        if (!mgo) {
            MGOM.notify('Erreur lors de la copie', 'error');
            return;
        }

        navigator.clipboard.writeText(mgo).then(() => {
            MGOM.notify(mgo+' copié avec succès');
        }).catch(err => {
            console.error('Erreur lors de la copie :', err);
            MGOM.notify(err, 'error');
        });
    }

    function initConfirmDelete() {
        const modal = document.getElementById('confirmDeleteModal');
        const confirmBtn = document.getElementById('confirmDeleteBtn');

        modal.addEventListener('show.bs.modal', event => {
          const triggerBtn = event.relatedTarget;
          const url = triggerBtn.getAttribute('data-url');

          confirmBtn.setAttribute('href', url);
        });
    }

    function enregistrePublicationDuJour(event) {
      btn = event.currentTarget;

      const id = btn.dataset.id;

        fetch(`/publication/jour/${id}`, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(r => r.json())
        .then(data => {
            if (data.success) {
                this.querySelector('i').classList.remove('text-danger');
                this.querySelector('i').classList.add('text-success');
            }
            MGOM.notify(data.message);
        });
    }

    function initEvent() {
      document.querySelectorAll('[id^="copierMGO"]').forEach(button => {
          button.addEventListener('click', callCopieMGO);
      });
      
      document.querySelectorAll('button[id^="genComptePagePublique"]').forEach(button => {
          button.addEventListener('click', function (e) {
            const button = e.target.closest('button[data-url]');
            document.location = button.dataset.url;
          });
      });

      document.querySelectorAll('.btn-publication').forEach(btn => {
        btn.addEventListener('click', enregistrePublicationDuJour);
      });
    }

    function togglePrincipal(element) {
        var compteId = element.getAttribute('data-id');
        if (!compteId) return;

        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/compte/toggle-principal/' + compteId, true);

        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.setRequestHeader('Content-Type', 'application/json');

        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    try {
                        var data = JSON.parse(xhr.responseText);
                        if (data.success) {
                            updateIcon(element, data.principal);
                        } else {
                            MGOM.notify((data.error || 'Impossible de changer l’état principal.'), 'error');
                        }
                    } catch(e) {
                        MGOM.notify("Réponse invalide du serveur.", 'error');
                    }
                } else {
                    alert('Erreur de communication avec le serveur (statut ' + xhr.status + ').');
                }
            }
        };

        xhr.send(null);
    }

    function updateIcon(element, isPrincipal) {
        element.classList.toggle('text-warning', isPrincipal);
        element.classList.toggle('text-secondary', !isPrincipal);

        element.classList.toggle('opacity-100', isPrincipal);
        element.classList.toggle('opacity-30', !isPrincipal);

        element.setAttribute('title', isPrincipal ? 'Compte principal' : 'Définir comme principal');
        element.setAttribute('aria-pressed', isPrincipal ? 'true' : 'false');
        element.style.cursor = 'pointer';

        // Ajout de l’animation flashy
        element.classList.add('flashy');
        // Retire la classe après la fin de l’animation (0.8s * 2 itérations = 1.6s)
        setTimeout(function() {
            element.classList.remove('flashy');
        }, 1600);

        // Mise à jour du badge correspondant
        var compteId = element.getAttribute('data-id');
        if (!compteId) return;

        var badge = document.getElementById('badge_compte' + compteId);
        if (!badge) return;

        // Met à jour l'attribut data-principal
        badge.setAttribute('data-principal', (isPrincipal ? "1" : "0"));
    }
    
    function onPageLoad() {
      initEvent();
      initConfirmDelete();
    }
    
    window.addEventListener('load', onPageLoad);
  </script>
{% endblock %}

{% block styleSheets %}
<style>
.opacity-30 { opacity: 0.3; }
.opacity-100 { opacity: 1; }
@keyframes flash {
  0%, 100% { filter: drop-shadow(0 0 0 transparent); }
  50% { filter: drop-shadow(0 0 8px gold); }
}

.flashy {
  animation: flash 0.8s ease-in-out 2;
}
.object-fit-contain {
  object-fit: contain;
}
.code-mgo {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}
.code-mgo i {
  flex-shrink: 0;
}
/* Transition douce pour les liens Bootstrap */
.transition {
  transition: color 0.3s ease;
}

/* Classe personnalisée pour appliquer la couleur primaire au hover */
.text-hover-primary:hover {
  color: #0d6efd !important;
}
</style>
{% endblock %}